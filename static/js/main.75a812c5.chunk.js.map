{"version":3,"sources":["Component/ContactsListItem/ContactListItem.module.css","Component/Filter/Filter.module.css","Component/ContactList/ContactList.module.css","Component/Container/Container.module.css","redux/toogleContacts.js","Component/ContactForm/ContactForm.jsx","Component/ContactsListItem/ContactSListItem.jsx","helpers/filterContacts.js","Component/ContactList/ContactList.jsx","Component/Container/Container.jsx","Component/Filter/Filter.jsx","App.js","redux/store.js","index.js","Component/ContactForm/ContactForm.module.css"],"names":["module","exports","toogleContacts","createSlice","name","initialState","items","filter","reducers","addedContacts","state","payload","push","removeContacts","id","contactsFilter","actions","ContactForm","dispatch","useDispatch","useState","setName","number","setNumber","contacts","useSelector","handleInputChange","e","target","value","contactExits","find","contact","toUpperCase","className","styles","forma","onSubmit","preventDefault","alert","nanoid","blockform","htmlFor","LabelForm","NamesForm","type","pattern","title","required","onChange","ButtonsContact","ContactListItem","dispath","NumberContacts","onClick","handleContactDelete","filterContacts","filterValue","toLowerCase","includes","trim","ContactList","s","map","Container","children","Filter","placeholder","currentTarget","App","persistConfig","key","storage","rootReducer","combineReducers","reducer","persistedReducer","persistReducer","store","configureStore","devTools","process","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.75a812c5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ButtonsContact\":\"ContactListItem_ButtonsContact__1lk1E\",\"NumberContacts\":\"ContactListItem_NumberContacts__QeFvJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LabelForm\":\"Filter_LabelForm__foaSb\",\"NamesForm\":\"Filter_NamesForm__185S6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactList\":\"ContactList_ContactList__3_aZm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__1t0e4\"};","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const toogleContacts = createSlice({\r\n  name: 'contacts',\r\n  initialState: {\r\n    items: [],\r\n    filter: '',\r\n  },\r\n  reducers: {\r\n    addedContacts: (state, { payload }) => {\r\n      state.items.push(payload);\r\n    },\r\n\r\n    removeContacts: (state, { payload }) => {\r\n      state.items = state.items.filter(({ id }) => id !== payload);\r\n    },\r\n\r\n    contactsFilter: (state, { payload }) => {\r\n      state.filter = payload;      \r\n    }    \r\n  },\r\n});\r\n\r\n\r\nexport const { addedContacts, removeContacts, contactsFilter } = toogleContacts.actions;\r\nexport default toogleContacts.reducer;\r\n\r\n","import {useState} from 'react'\nimport styles from '../ContactForm/ContactForm.module.css'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addedContacts } from '../../redux/toogleContacts';\nimport { nanoid } from '@reduxjs/toolkit';\n\nconst ContactForm = () => {\n    const dispatch = useDispatch();\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const contacts = useSelector((state) => state.contacts.items);\n  \nconst handleInputChange = e => {\n        const { name, value } = e.target;\n        switch (name) {\n            case 'name':\n                setName(value)\n                break;\n\n            case 'number':\n                setNumber(value)\n                break;\n\n            default:\n                return;\n        }\n    }\n    \nconst handleSubmit = e => {\n    e.preventDefault();\n    if(contactExits()){\n        alert(`${name} is already in contacts`)\n        return;\n    }\n    dispatch(addedContacts({ name, number, id: nanoid() }));\n    setName('');\n    setNumber('');\n    };\n    \n    const contactExits = () => {\n        contacts.find(contact =>\n            contact.name.toUpperCase() === name.toUpperCase() || contact.number === number);\n    }\n\n    return(\n        <form className={styles.forma} onSubmit={handleSubmit}>\n            <div className={styles.blockform}>\n            <label htmlFor=\"\" className={styles.LabelForm}>\n                <span className={styles.NamesForm}>Name</span>\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                    required\n                    value={name}\n                    onChange={handleInputChange}\n                    />\n            </label>\n                \n                <label className={styles.LabelForm}>\n                <span className={styles.NamesForm}>Number</span>\n                <input\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                    required\n                    value={number}\n                    onChange={handleInputChange}\n                    />\n                </label>\n            </div>\n            <button\n                type=\"submit\"\n                className={styles.ButtonsContact}\n            >Add contact</button>\n        </form>\n    );\n  }\n\n\nexport default ContactForm;","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types'; \nimport styles from './ContactListItem.module.css';\nimport { removeContacts } from '../../redux/toogleContacts';\n\nconst ContactListItem = ({ id, name, number }) => {\n    \n    const dispath = useDispatch();\n\n    const handleContactDelete = id => {\n        dispath(removeContacts(id));\n    }\n    return(\n        <>\n        <span className={styles.NumberContacts}>\n            {name}: {number}\n        </span>\n            <button\n                className={styles.ButtonsContact}\n                type=\"button\"\n                onClick={() => handleContactDelete(id)}>\n            Delete\n        </button>\n        </>\n    );\n}\n\nContactListItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n};\n\nexport default ContactListItem;","const filterContacts = (contacts, filterValue) => {\r\n    return contacts.filter(contact =>\r\n        contact.name.toLowerCase().includes(filterValue.toLowerCase().trim()))\r\n}\r\n\r\nexport default filterContacts;","import { useSelector } from 'react-redux';\nimport ContactListItem from '../ContactsListItem/ContactSListItem';\nimport s from './ContactList.module.css';\nimport filterContacts from '../../helpers/filterContacts';\n\nconst ContactList = () => {\nconst contacts = useSelector((state) => state.contacts.items);\n    const filterValue = useSelector((state) => state.contacts.filter);\n\n    return(\n        <ul className={s.ContactList}>\n        {filterContacts(contacts, filterValue).map(({id, name, number}) => (\n        <li key={id}>\n            <ContactListItem\n                id={id}\n                name={name}\n                number={number}\n            />\n        </li>          \n    ))}\n    </ul>\n    )\n}\n\nexport default ContactList;","import PropTypes from 'prop-types'\nimport s from './Container.module.css'\n\nconst Container = ({children}) => {\n    return <div className={s.Container}>\n        {children}\n    </div>\n}\n\nContainer.propTypes = {\n    children: PropTypes.node,\n}\n\nexport default Container","import styles from './Filter.module.css';\nimport { contactsFilter } from '../../redux/toogleContacts';\nimport { useDispatch } from 'react-redux';\n\nconst Filter = () => {\n    const dispatch = useDispatch();\n\n    const filterUsers = e => {\n        dispatch(contactsFilter(e.currentTarget.value));\n    };\n    return(\n        <label className={styles.LabelForm}>\n            <span className={styles.NamesForm}>Find contacts by name</span>\n            <input\n                type=\"text\"\n                name=\"filter\"\n                placeholder='filter contacts'\n                onChange={filterUsers} \n            />\n        </label>\n    );\n}\n\nexport default Filter;","import ContactForm from './Component/ContactForm/ContactForm';\nimport ContactList from './Component/ContactList/ContactList';\nimport Container from './Component/Container/Container';\nimport Filter from './Component/Filter/Filter';\n\nconst App = () => {\n\n   return(\n     <Container>\n     <h1>Phonebook</h1>\n    <ContactForm/>\n    <h2>Contacts</h2>\n       <Filter/>\n         <ContactList />\n    </Container>\n   );\n }\n\nexport default App;\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { configureStore, combineReducers } from '@reduxjs/toolkit';\r\nimport { toogleContacts } from './toogleContacts';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n\r\nconst persistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n}\r\nconst rootReducer = combineReducers({\r\n  contacts: toogleContacts.reducer,\r\n})\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\n const store = configureStore({\r\n  reducer: persistedReducer,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }),\r\n})\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"blockform\":\"ContactForm_blockform__3SiWX\",\"LabelForm\":\"ContactForm_LabelForm__t62zP\",\"NamesForm\":\"ContactForm_NamesForm__3uUz6\",\"ButtonsContact\":\"ContactForm_ButtonsContact__3bdqC\"};"],"sourceRoot":""}